=== File: src/fetchers/insights/insightsFetcher.js ===
=== Size: 9KB ===

const path = require('path');
const fs = require('fs').promises;
const FB = require('fb');
const FacebookConfig = require('../../utils/fbConfig');

class InsightsFetcher {
    constructor() {
        const fbConfig = new FacebookConfig();
        FB.setAccessToken(fbConfig.getAccessToken());
        FB.options({ version: fbConfig.getApiVersion() });
        this.accountId = fbConfig.getAccountId();
        this.outputPath = path.join(process.cwd(), 'src', 'output');
        this.waitTime = 60000;
        this.fields = [
            'campaign_name',
            'adset_name',
            'ad_name',
            'reach',
            'impressions',
            'frequency',
            'objective',
            'spend',
            'cpm',
            'cpc',
            'ctr',
            'video_p25_watched_actions',
            'video_p50_watched_actions',
            'video_p75_watched_actions',
            'video_p100_watched_actions',
            'date_start',
            'date_stop'
        ];
    }

    async makeApiCall(endpoint, method, params) {
        return new Promise((resolve, reject) => {
            console.log('\nMaking API call:');
            console.log('Endpoint:', endpoint);
            console.log('Method:', method);
            console.log('Params:', JSON.stringify(params, null, 2));
           
            FB.api(endpoint, method, params, (response) => {
                if (!response) {
                    console.error('No response received from Facebook API');
                    reject(new Error('No response received'));
                    return;
                }
               
                if (response.error) {
                    console.error('Facebook API Error:');
                    console.error('- Message:', response.error.message);
                    console.error('- Type:', response.error.type);
                    console.error('- Code:', response.error.code);
                    console.error('- Subcode:', response.error.error_subcode);
                    reject(response.error);
                    return;
                }
                if (method === 'GET' && Array.isArray(response.data) && response.data.length === 0) {
                    console.warn('No data found for the query');
                }
                console.log('API Response:', JSON.stringify(response, null, 2));
                resolve(response);
            });
        });
    }

    handleError(error, context) {
        console.error(`Error in ${context}:`, error);
        return {
            success: false,
            error: error.message,
            context
        };
    }

    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    getDateRangeForWeek(year, week) {
        const startDate = new Date(year, 0, 1 + (week - 1) * 7);
        startDate.setUTCHours(0, 0, 0, 0);
        const endDate = new Date(startDate);
        endDate.setDate(startDate.getDate() + 6);
        
        return {
            since: startDate.toISOString().split('T')[0],
            until: endDate.toISOString().split('T')[0]
        };
    }

    async fetchAllInsights(params = {}) {
        const { activeOnly = false, year, week } = params;
        let retries = 3;
        
        while (retries > 0) {
            try {
                const dateRange = this.getDateRangeForWeek(year, week);
                console.log(`Fetching data for week ${week} of ${year} (${dateRange.since} to ${dateRange.until})`);
                console.log(`Using account ID: ${this.accountId}`);
                
                const campaignParams = {
                    fields: ['id', 'name', 'status', 'effective_status'],
                    limit: 1000
                };

                if (activeOnly) {
                    campaignParams.filtering = [{
                        field: "effective_status",
                        operator: "IN",
                        value: ['ACTIVE', 'PAUSED']
                    }];
                }

                const campaigns = await this.makeApiCall(
                    `/act_${this.accountId}/campaigns`,
                    'GET',
                    campaignParams
                );

                if (!campaigns.data || campaigns.data.length === 0) {
                    console.log('No campaigns found. Please verify:');
                    console.log('1. Account ID is correct');
                    console.log('2. Access token has necessary permissions');
                    console.log('3. There are active campaigns in the account');
                    return { success: false, error: 'No campaigns found' };
                }

                for (const campaign of campaigns.data) {
                    try {
                        await this._fetchAndSaveInsights(campaign, activeOnly, dateRange, year, week);
                        await this.sleep(this.waitTime);
                    } catch (error) {
                        console.error(`Error processing campaign ${campaign.name}:`, error.message);
                    }
                }

                return { success: true };
            } catch (error) {
                console.error('API call failed, retries left:', retries - 1);
                retries--;
                if (retries === 0) {
                    return this.handleError(error, 'fetchAllInsights');
                }
                await this.sleep(5000);
            }
        }
    }

    async _fetchAndSaveInsights(campaign, activeOnly, dateRange, year, week) {
        const timestamp = new Date().toISOString().replace(/:/g, '-');
        const weekStr = String(week).padStart(2, '0');

        try {
            const campaignInsights = await this.makeApiCall(
                `/${campaign.id}/insights`,
                'GET',
                {
                    fields: this.fields.join(','),
                    time_range: {
                        since: dateRange.since,
                        until: dateRange.until
                    }
                }
            );
            await this.sleep(this.waitTime);

            const adParams = {
                fields: ['id', 'name', 'status', 'effective_status', 'adset_id']
            };

            if (activeOnly) {
                adParams.filtering = [{
                    field: "effective_status",
                    operator: "IN",
                    value: ['ACTIVE', 'PAUSED']
                }];
            }

            const ads = await this.makeApiCall(
                `/${campaign.id}/ads`,
                'GET',
                adParams
            );

            const adInsights = [];
            for (const ad of ads.data || []) {
                const insights = await this.makeApiCall(
                    `/${ad.id}/insights`,
                    'GET',
                    {
                        fields: this.fields.join(','),
                        time_range: {
                            since: dateRange.since,
                            until: dateRange.until
                        }
                    }
                );
                adInsights.push({
                    adId: ad.id,
                    adsetId: ad.adset_id,
                    name: ad.name,
                    status: ad.status,
                    effectiveStatus: ad.effective_status,
                    insights: insights.data || []
                });
                await this.sleep(this.waitTime);
            }

            const insightsData = {
                metadata: {
                    fetchedAt: new Date().toISOString(),
                    activeOnly,
                    reportingPeriod: {
                        year,
                        week: parseInt(weekStr),
                        startDate: dateRange.since,
                        endDate: dateRange.until
                    }
                },
                campaign: {
                    id: campaign.id,
                    name: campaign.name,
                    status: campaign.status,
                    effectiveStatus: campaign.effective_status,
                    insights: campaignInsights.data || []
                },
                ads: adInsights
            };

            const fileName = `insight_${campaign.id}___${campaign.name.split('__')[0]}__traffic__${campaign.id}___${year}${weekStr}___${timestamp}.json`;
            const filePath = path.join(this.outputPath, fileName);

            await fs.mkdir(this.outputPath, { recursive: true });
            await fs.writeFile(filePath, JSON.stringify(insightsData, null, 2));

            console.log(`Saved insights for campaign ${campaign.name} to ${filePath}`);
            return { success: true };
        } catch (error) {
            console.error(`Error processing campaign ${campaign.name}:`, error.message);
            return { success: false, error: error.message };
        }
    }
}

module.exports = InsightsFetcher;